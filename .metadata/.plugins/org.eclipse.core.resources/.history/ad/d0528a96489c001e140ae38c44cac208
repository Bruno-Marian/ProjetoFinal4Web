package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.models.Usuario;
import com.example.demo.repository.UsuarioRepository;

@CrossOrigin
@RestController
@RequestMapping("/usuario")
public class UsuarioController {

	@Autowired
	UsuarioRepository usuarioRepository;

	@GetMapping()
	public ResponseEntity<List<Usuario>> getUsuarios() {
		return ResponseEntity.status(HttpStatus.OK).body(usuarioRepository.findAll());
	}

	@GetMapping("/{id}")
	public ResponseEntity<Usuario> getUsuario(@PathVariable("id") long id) {
		Optional<Usuario> opUsuario = usuarioRepository.findById(id);
		try {
			Usuario usuario = opUsuario.get();
			return ResponseEntity.status(HttpStatus.OK).body(usuario); 
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}

	@PostMapping()
	public ResponseEntity<Usuario> inserirUsuario(@RequestBody Usuario usuario) {
		Usuario usuarioResult = usuarioRepository.save(usuario);
		return ResponseEntity.status(HttpStatus.CREATED).body(usuarioResult);
	}

	@PutMapping("/{idUsuario}")
	public ResponseEntity<Usuario> alterarUsuario(@PathVariable("idUsuario") long idUsuario,
			@RequestBody Usuario usuario) {
		Optional<Usuario> opUsuario = usuarioRepository.findById(idUsuario);

		try {
			Usuario usuarioResult = opUsuario.get();

			usuarioResult.setLogin(usuario.getLogin());
			usuarioResult.setSenha(usuario.getSenha());

			usuarioRepository.save(usuarioResult);

			return ResponseEntity.status(HttpStatus.OK).body(usuarioResult);
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Usuario> DeletarContato(@PathVariable("id")Long id){
    	Optional<Usuario> opUsuario = usuarioRepository.findById(id);
    	try {
    		Usuario ct = opUsuario.get();
    		usuarioRepository.delete(ct);
    		return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();	
		}	    	
	}
}
